C++编译器默认会为类创建4个函数： 默认构造函数，拷贝构造函数，赋值函数，析构函数；

class Tmp {
public:
    Tmp() {...};

    Tmp(const Tmp &rhs) {...};
    Tmp & operator=(const Tmp &rhs) {...};

    ~Tmp() {...};
};

这些函数全是public且inline，在它们被调用的时候编译器自动创建；

只要声明自己的构造函数，不管有没有参数，编译器不再创建默认构造函数；
编译器创建的析构函数是”non-virtual“,除非这个类的基类有虚析构函数；

如果类内含有“引用”或是“const"数据成员，编译器不会创建拷贝构造及赋值函数；
如果父类的拷贝构造及赋值函数声明为private,刚编译器不会为其子类创建拷贝构造及赋值函数；

自己声明其中一个：    阻止编译器创建相应函数；
令其为私有：         阻止类实例及其它类调用；（编译期错误）
令其私有且不实现：    阻止任何调用：包括类内部成员及friend函数/类；（链接期错误）


为阻止拷贝而设计基类，可以将上面链接期错误提前到编期：

class Uncopyable {
protected:
    Uncopyable() {};
    ~Uncopyable() {};
private:
    Uncopyable(const Uncopyable &);
    Uncopyable & operator=(const Uncopyable &);
};

使用：
class Tmp: private Uncopyable {...};

-----------------------------------------------------------------------------------------------------------------

